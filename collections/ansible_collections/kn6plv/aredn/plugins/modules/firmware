#! /usr/bin/ucode

DOCUMENTATION = `
---
module: firmware
short_description: Check and update node firmware
description:
  - Check and update node firmware to a specific version
  version:
    description:
      - Check the node's current firmware against the given version (either 'release' or 'nightly')
        and update if different. The node will download the correct firmware if internet access
        is available.
    type: str
  file:
    description:
      - If a file is given, this is new firmware to upgrade the node with (so no internet access
        is required).
    type: str
  shutdown_services:
    description:
      - True to shutdown services before the upgrade process begins (to free up RAM).
    type: bool
notes:
  - None
authors:
   - Tim Wilkinson KN6PLV <tim.j.wilkinson@gmail.com
`;

import * as fs from "fs";
import * as uci from "uci";

const root = "http://downloads.arednmesh.org/";

const services = [
    "meshntpd",
    "meshchatsync",
    "dnsmasq",
    "ntpclient",
    "urngd",
    "telnet",
    "manager",
    "uhttpd"
];

function stop_services()
{
    for (let i = 0; i < length(services); i++) {
        system(`exec /etc/init.d/${services[i]} stop > /dev/null 2>&1`);
    }
}

function fetch(url)
{
    const p = fs.popen(`/bin/uclient-fetch "${url}" -O - 2> /dev/null`);
    if (p) {
        try {
            const data = p.read("all");
            p.close();
            return { code: 200, body: data };
        }
        catch (_) {
        }
        p.close();
    }
    return { code: -1 };
}

function rpath(r)
{
    const m = match(r, /(\d+)\.(\d+)\.\d+\.\d+/);
    return `${m[1]}/${m[2]}/${r}`;
}

function execute(args)
{
    const result = { changed: false, failed: false };

    const cursor = uci.cursor("/etc/local/uci");
    let profiles;
    let sha256;
    let version;

    if (args.shutdown_services) {
        stop_services();
        return result;
    }
    if (args.file) {
        if (!fs.access(args.file)) {
            result.failed = true;
            result.msg = `cannot find file: ${args.file}`;
            return result;
        }
        if (!args.sha256) {
            result.failed = true;
            result.msg = "missing checksum";
        }
        sha256 = args.sha256;
        if (args.file != "/tmp/firmware") {
            system("exec mv -f '${args.fil}' /tmp/firmware");
        }
    }
    else {
        let board;
        let f = fs.open("/etc/os-release");
        if (f) {
            for (let line = f.read("line"); length(line); line = f.read("line")) {
                let m = match(line, /^VERSION="(.*)"/);
                if (m) {
                    version = m[1];
                }
                m = match(line, /^OPENWRT_BOARD="(.*)"/);
                if (m) {
                    board = m[1];
                }
            }
            f.close();
        }

        if (!version) {
            result.failed = true;
            result.msg = "cannot find current version";
            return result;
        }
        if (!args.version && !args.file) {
            result.failed = true;
            result.msg = "no version specified";
            return result;
        }
        if (args.version == version) {
            result.version = version;
            return result;
        }

        if (!board) {
            result.failed = true;
            result.msg = "cannot find board";
            return result;
        }

        let base_url;
        if (args.version == "nightly") {
            // Nightlies are easy to find
            base_url = `${root}snapshots/targets/${board}/`;
        }
        else if (args.version == "babel") {
            base_url = `${root}snapshots_babel/targets/${board}/`;
        }
        else {
            // For everything else we need to find the available releases
            const r = fetch(`${root}afs/www/config.js`);
            const releases = [];
            if (r.body) {
                result.failed = true;
                result.msg = `cannot find versions: ${r.code}`;
                result.url = `${root}afs/www/config.js`;
                return result;
            }
            const lines = split(r.body, "\n");
            for (let i = 0; i < length(lines); i++) {
                const l = lines[i];
                const m = match(l, /versions: \{(.+)\}/);
                if (m) {
                    const kvs = split(m[1], ", ");
                    for (let i = 0; i < length(kvs); i++) {
                        const kv = split(kvs[i], ": ");
                        push(releases, trim(kv[0], "'"));
                    }
                    break;
                }
            }
            if (length(releases) == 0) {
                result.failed = true;
                result.msg = "no releases";
                return result;
            }
            sort(releases);
            // Select the latest if that's what we want
            if (args.version == "release") {
                base_url = `${root}releases/${rpath(releases[length(releases)-1])}/targets/${board}/`;
            }
            else {
                // Otherwise make sure we have the specific one we ask for
                if (!match(args.version, /\d+\.\d+\.\d+\.\d+/)) {
                    result.failed = true;
                    result.msg = `unknown version: ${args.version}`;
                    return result;
                }
                let found = false;
                for (let i = 0; i < length(releases); i++) {
                    if (releases[i] == args.version) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    result.failed = true;
                    result.msg = "version not found";
                    return result;
                }
                base_url = `${root}releases/${rpath(args.version)}/targets/${board}/`;
            }
        }

        // Fetch and parse the profiles for the selected update
        const p = fetch(`${base_url}profiles.json`);
        if (!p.body) {
            result.failed = true;
            result.msg = `cannot read firmware profiles: ${p.code}`;
            return result;
        }
        profiles = json(p.body);

        // If we're on the correct version, nothing to do
        if (profiles.version_number == version) {
            result.version = version;
            return result;
        }

        // Otherwise, look for the appropriate firmware file
        let boardtype = "unknown";
        f = fs.popen("exec /usr/local/bin/get_hardwaretype");
        if (f) {
            boardtype = match(f.read("all"), /([^ \t]+)/)[1];
            f.close();
        }
        // Board type naming inconsistencies
        if (match(boardtype, /^cpe/)) {
            boardtype = `tplink,${boardtype}`;
        }

        for (let p = 0; p < length(profiles.profiles); p++) {
            const profile = profiles.profiles[p];
            for (let d = 0; d < length(profile.supported_devices); d++) {
                if (boardtype == profile.supported_devices[d]) {
                    for (let i = 0; i < length(profile.images); i++) {
                        if (profile.images[i].type == "sysupgrade") {
                            result.firmware = `${base_url}${profile.images[i].name}`;
                            sha256 = profile.images[i].sha256;
                            break;
                        }
                    }
                    break;
                }
            }
        }
        if (!result.firmware) {
            result.failed = true;
            result.msg = "firmware not found";
            return result;
        }

        // Fetch and verify the firmware
        const node = cursor.get("hsmmmesh", "settings", "node") || "Node";
        if (system(`exec /bin/uclient-fetch -U 'node: ${node}' -O /tmp/firmware '${result.firmware}' > /dev/null 2>&1`) != 0) {
            result.failed = true;
            result.msg = "failed to download firmware";
            return result;
        }
    }

    let f = fs.popen("exec sha256sum /tmp/firmware");
    if (f) {
        const m = match(f.read("all"), /^([^ \t]+)/);
        if (m && m[1] == sha256) {
            sha256 = nil
        }
        f.close();
    }
    if (sha256) {
        fs.unlink("/tmp/firmware");
        result.failed = true;
        result.msg = "firmware checksum failed";
        return result;
    }

    // Do the upgrade
    system(`setsid -c /usr/local/bin/aredn_sysupgrade ${args.first_boot ? '--firstuse' : ''}/tmp/firmware > /dev/null 2>&1 &`);

    result.changed = true;
    if (profiles) {
        result.version = profiles.version_number;
    }
    if (version) {
        result.old_version = version;
    }
    result.msg = `upgrading with ${args.first_boot ? "reset": "backup"}`;

    return result
}

fs.writefile("/proc/sys/vm/drop_caches", "3");

// Boilerplate below --
// WANT_JSON

try {
    const result = execute(json(fs.readfile(ARGV[0])));
    if (result.failed !== false) {
        result.failed = true;
    }
    if (result.changed !== false) {
        result.changed = true;
    }
    return printf("%J", result);
}
catch (e) {
    return printf("%J", { failed: true, changed: false, msg: e });
}

