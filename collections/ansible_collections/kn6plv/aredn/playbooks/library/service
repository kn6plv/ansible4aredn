#! /usr/bin/ucode

import * as fs from "fs";
import * as ubus from "ubus";

function run(cmd, state)
{
    system(`${cmd} ${state}`, 5000);
}

function execute(args)
{
    const result = { changed: false, failed: false };

    if (!args.name || !fs.access(`/etc/init.d/${args.name}`)) {
        result.failed = true;
        result.msg = `Missing service: ${args.name || ""}`;
    }
    else {
        const cmd = `/etc/init.d/${args.name}`;
        if (args.state == "reloaded") {
            run(cmd, "reload");
            result.changed = true;
        }
        else if (args.state == "restarted") {
            run(cmd, "restart");
            result.changed = true;
        }
        else {
            local list = ubus.connect().call("service", "list", {});
            if (args.state == "started") {
                if (!list[args.name] || !list[args.name].instances.instance1.running) {
                    run(cmd, "start");
                    result.changed = true;
                }
            }
            else if (args.state == "stopped") {
                if (list[args.name] && list[args.name].instances.instance1.running) {
                    run(cmd, "stop");
                    result.changed = true;
                }
            }
            else {
                result.failed = true;
                result.msg = "Bad state";
            }
        }
    }

    return result;
}

// Boilerplate below --
// WANT_JSON

try {
    const result = execute(json(fs.readfile(ARGV[0])));
    if (result.failed !== false) {
        result.failed = true;
    }
    if (result.changed !== false) {
        result.changed = true;
    }
    return printf("%J", result);
}
catch (e) {
    return printf("%J", { failed: true, changed: false, msg: e });
}
gify(result))
